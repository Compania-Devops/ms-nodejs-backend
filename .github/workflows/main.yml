name: Build

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: CI
    environment: dev
    runs-on: ubuntu-latest

    steps:
      - name: Obtener c贸digo fuente
        uses: actions/checkout@v4
      - name: Obtener SHA corto
        id: short
        run: echo "short_sha=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_OUTPUT
      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Instalar dependencias
        run: npm install
      - name: Ejecutar pruebas unitarias
        run: npm run test:unit
      - name: Ejecutar pruebas de integraci贸n
        run: npm run test:integration
      # - name: Crear proyecto en SonarQube
      #   env:
      #     SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     PROJECT_KEY="my-nodejs-app"
      #     PROJECT_NAME="My NodeJS App"
      #     echo "Verificando si el proyecto existe..."
      #     RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u $SONAR_TOKEN: \
      #       "$SONAR_HOST_URL/api/projects/search?projects=$PROJECT_KEY")
      #     if [ "$RESPONSE" -eq 404 ]; then
      #       echo "Proyecto no encontrado, creando..."
      #       curl -u $SONAR_TOKEN: -X POST "$SONAR_HOST_URL/api/projects/create" \
      #         -d "name=$PROJECT_NAME" \
      #         -d "project=$PROJECT_KEY"
      #     else
      #       echo "El proyecto existe o la API devolvi贸 el c贸digo $RESPONSE"
      #     fi
      # - uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
      - name: Crear archivo ZIP del proyecto
        run: zip -r build-artifact.zip . -x "node_modules/*" ".git/*"

      - name: Subir artefacto ZIP
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build-artifact.zip
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker Login to ACR
        run: |
          az acr login --name acrapellido

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=acrapellido.azurecr.io/my-nodejs-app
          TAG=${{ steps.short.outputs.short_sha }}
          echo "Construyendo imagen $IMAGE_NAME:$TAG"
          docker build -t $IMAGE_NAME:$TAG .
          docker push $IMAGE_NAME:$TAG
  deploy:
    name: CD
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Obtener SHA corto
        id: short
        run: echo "short_sha=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_OUTPUT
        
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
  
      - name: Set variables
        run: |
          IMAGE_NAME=acrapellido.azurecr.io/my-nodejs-app
          TAG=${{ steps.short.outputs.short_sha }}
          APP_NAME=aca-ms-apellido-dev
          RESOURCE_GROUP=rg-cicd-terraform-app-apellido

          echo "IMAGE=$IMAGE_NAME:$TAG" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV
  
      - name: Deploy to Azure Container App
        run: |
          echo "Updating Azure Container App $APP_NAME to image $IMAGE"
          az containerapp update \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --image $IMAGE
